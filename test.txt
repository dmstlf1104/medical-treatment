@app.post("/upload")
async def upload_file(file: UploadFile = File(..., media_type="image/*")):
    try:
        # 사용자 ID 가져오기
        user_id = user_id_storage.get('current_user_id')
        if not user_id:
            return JSONResponse(content={"error": "사용자 ID가 저장되어 있지 않습니다."}, status_code=400)

        # 이미지 파일 읽기
        image_bytes = await file.read()
        image = Image.open(BytesIO(image_bytes))
        with BytesIO() as buffer:
            image.save(buffer, format="PNG")
            image_data = buffer.getvalue()  # 바이너리 데이터

        # OCR API 요청
        with BytesIO(image_bytes) as buffer:
            files = {"file": buffer}
            response = requests.post(url, headers=headers, files=files)
            if response.status_code == 200:
                result = response.json()
                text = result.get('text', '')
                documents = preprocess_text(text)

                # 예제 사용자 입력; 실제 앱에서는 요청에서 가져와야 합니다
                user_input = "병원에서 받은 검사 결과지를 해석해줘"
                analysis_result = retrieval_qa_chain(user_input, documents)

                # 결과 구성
                result_array = [
                    {"term_ko": "OCR 추출 텍스트", "term_en": "", "explanation": documents},
                    {"term_ko": "분석 결과", "term_en": "", "explanation": analysis_result}
                ]

                # 데이터베이스에 OCR 결과 및 분석 결과, 이미지 데이터 삽입
                connection = mysql.connector.connect(**db_config)
                cursor = connection.cursor()
                try:
                    insert_data_query = """
                        INSERT INTO medical_records (user_id, ocr_text, analysis_result, ocr_image)
                        VALUES (%s, %s, %s, %s)
                    """
                    cursor.execute(insert_data_query, (user_id, documents, analysis_result, image_data))
                    connection.commit()
                    print("데이터가 성공적으로 삽입되었습니다.")
                except mysql.connector.Error as db_error:
                    print(f"Database insertion error: {db_error}")
                finally:
                    cursor.close()
                    connection.close()

                return JSONResponse(content=result_array)
            else:
                error_msg = "OCR 추출에 실패했습니다."
                return JSONResponse(content=[{"term_ko": "Error", "term_en": "", "explanation": error_msg}], status_code=response.status_code)
    except Exception as e:
        error_msg = str(e)
        print(f"Error during file processing: {error_msg}")
        return JSONResponse(content=[{"term_ko": "Error", "term_en": "", "explanation": error_msg}], status_code=500)